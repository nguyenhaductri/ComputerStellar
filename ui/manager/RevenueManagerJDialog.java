/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package poly.cafe.ui.manager;


import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import dao.RevenueDAO;
import poly.cafe.dao.impl.RevenueDAOImpl;
import poly.cafe.entity.Revenue;
import poly.cafe.util.TimeRange;
import poly.cafe.util.XDate;


/**
 *
 * @author DELL
 */
public class RevenueManagerJDialog extends javax.swing.JDialog implements RevenueController {

    /**
     * Creates new form BillJDialog
     */
    public RevenueManagerJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtBegin = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtEnd = new javax.swing.JTextField();
        btnFilter = new javax.swing.JButton();
        cboTimeRanges = new javax.swing.JComboBox<>();
        tabs = new javax.swing.JTabbedPane();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblByCategory = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblByUser = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Thống kê doanh thu");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel10.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Từ ngày: ");
        jPanel11.add(jLabel1);

        txtBegin.setColumns(8);
        jPanel11.add(txtBegin);

        jLabel2.setText("Đến ngày: ");
        jPanel11.add(jLabel2);

        txtEnd.setColumns(8);
        jPanel11.add(txtEnd);

        btnFilter.setText("Lọc");
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });
        jPanel11.add(btnFilter);

        cboTimeRanges.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hôm nay", "Tuần này", "Tháng này", "Quý này", "Năm nay" }));
        cboTimeRanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTimeRangesActionPerformed(evt);
            }
        });
        jPanel11.add(cboTimeRanges);

        jPanel10.add(jPanel11, java.awt.BorderLayout.PAGE_START);

        tabs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabsStateChanged(evt);
            }
        });

        jPanel12.setLayout(new java.awt.BorderLayout());

        tblByCategory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Loại", "Doanh thu", "Số lượng", "Giá thấp nhất", "Giá cao nhất", "Giá trung bình"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblByCategory.setRowHeight(25);
        tblByCategory.setRowMargin(1);
        tblByCategory.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblByCategory.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblByCategory.setShowGrid(true);
        jScrollPane1.setViewportView(tblByCategory);

        jPanel12.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        tabs.addTab("Doanh thu từng loại", jPanel12);

        jPanel13.setLayout(new java.awt.BorderLayout());

        tblByUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nhân viên", "Doanh thu", "Số bill", "Bill đầu tiên", "Bill cuối cùng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblByUser.setRowHeight(25);
        tblByUser.setRowMargin(1);
        tblByUser.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblByUser.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblByUser.setShowGrid(true);
        jScrollPane2.setViewportView(tblByUser);

        jPanel13.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        tabs.addTab("Doanh thu từng nhân viên", jPanel13);

        jPanel10.add(tabs, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.open();
    }//GEN-LAST:event_formWindowOpened

    private void tabsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabsStateChanged
        // TODO add your handling code here:
        this.fillRevenue();
    }//GEN-LAST:event_tabsStateChanged

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        // TODO add your handling code here:
        this.fillRevenue();
    }//GEN-LAST:event_btnFilterActionPerformed

    private void cboTimeRangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTimeRangesActionPerformed
        // TODO add your handling code here:
        this.selectTimeRange();
    }//GEN-LAST:event_cboTimeRangesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RevenueManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RevenueManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RevenueManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RevenueManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RevenueManagerJDialog dialog = new RevenueManagerJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFilter;
    private javax.swing.JComboBox<String> cboTimeRanges;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblByCategory;
    private javax.swing.JTable tblByUser;
    private javax.swing.JTextField txtBegin;
    private javax.swing.JTextField txtEnd;
    // End of variables declaration//GEN-END:variables

RevenueDAO dao = new RevenueDAOImpl();

@Override
public void open() {
    this.setLocationRelativeTo(null);
    this.selectTimeRange();
}

@Override
public void selectTimeRange() {
    TimeRange range = TimeRange.today();
    switch (cboTimeRanges.getSelectedIndex()) {
        case 0 -> range = TimeRange.today();
        case 1 -> range = TimeRange.thisWeek();
        case 2 -> range = TimeRange.thisMonth();
        case 3 -> range = TimeRange.thisQuarter();
        case 4 -> range = TimeRange.thisYear();
    }
    txtBegin.setText(XDate.format(range.getBegin(), "MM/dd/yyyy"));
    txtEnd.setText(XDate.format(range.getEnd(), "MM/dd/yyyy"));

    this.fillRevenue();
}

@Override
public void fillRevenue() {
    Date begin = XDate.parse(txtBegin.getText(), "MM/dd/yyyy");
    Date end = XDate.parse(txtEnd.getText(), "MM/dd/yyyy");
    switch(tabs.getSelectedIndex()){
        case 0 -> this.fillRevenueByCategory(begin, end);
        case 1 -> this.fillRevenueByUser(begin, end);
    }
}

private void fillRevenueByCategory(Date begin, Date end) {
    List<Revenue.ByCategory> items = dao.getByCategory(begin, end);

    DefaultTableModel model = (DefaultTableModel) tblByCategory.getModel();
    model.setRowCount(0);
    items.forEach(item -> {
        Object[] row = {
            item.getCategory(),
            String.format("$%.2f", item.getRevenue()),
            item.getQuantity(),
            String.format("$%.2f", item.getMinPrice()),
            String.format("$%.2f", item.getMaxPrice()),
            String.format("$%.2f", item.getAvgPrice())
        };
        model.addRow(row);
    });
}

private void fillRevenueByUser(Date begin, Date end) {
    List<Revenue.ByUser> items = dao.getByUser(begin, end);

    DefaultTableModel model = (DefaultTableModel) tblByUser.getModel();
    model.setRowCount(0);
    items.forEach(item -> {
        Object[] row = {
            item.getUser(),
            String.format("$%.2f", item.getRevenue()),
            item.getQuantity(),
            XDate.format(item.getFirstTime(), "hh:mm:ss dd-MM-yyyy"),
            XDate.format(item.getLastTime(), "hh:mm:ss dd-MM-yyyy")
        };
        model.addRow(row);
    });
}
}
